#+TITLE: Configuração pessoal do GNU emacs
#+AUTHOR: Eduardo Antunes dos Santos Vieira
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el

Essa é a minha configuração pessoal do GNU emacs, um editor de texto livre e gratuito.

* Definições preliminares

Definições de fonte e diretórios que devem ser utilizados pelo emacs.

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-
(setq ed/config-dir    "~/.config/emacs/"   ;; diretório de configuração
      ed/cache-dir     "~/.cache/emacs/"    ;; diretório de dados
      ed/fixed-font    "Inconsolata LGC 10" ;; fonte monoespaçada
      ed/fixed-serif   "IBM Plex Mono 10"   ;; fonte monoespaçada (serifas)
      ed/variable-font "Cantarell 12")      ;; fonte variável
#+end_src

* Configurações gerais

#+begin_src emacs-lisp
;; Indentação com 4 espaços por padrão
(setq-default tab-width 4
              indent-tabs-mode nil)

(setq scroll-margin 10           ;; espaço vertical a partir do cursor
      scroll-conservatively 101  ;; rolamento suave
      split-width-threshold nil) ;; abre janelas em split vertical por padrão

(setopt use-short-answers t) ;; respostas curtas
(electric-pair-mode 1) ;; delimitadores balanceados
#+end_src

* Gerência de pacotes

Os plugins do emacs são escritos em emacs-lisp e denominados pacotes. O editor conta com um gerenciador nativo
para eles, o =package.el=, que permite instalá-los facilmente de repositórios pré-configurados. Após a versão 29,
também traz por padrão a macro =use-package=, que é ótima para organizar configurações de pacotes.

#+begin_src emacs-lisp
(require 'package)
;; Adiciona o MELPA aos repositórios de pacotes
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

(package-initialize)
;; Mantém as listas de pacotes sempre atualizadas
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(setq use-package-always-ensure t) ;; garante a instalação de todos os pacotes
#+end_src

* Diretório limpo

Muitos pacotes do emacs (inclusive alguns nativos) colocam dados temporários direto no diretório de configuração
principal, o que deixa ele bem bagunçado. O pacote =no-littering=, junto com um pequeno conjunto de ajustes em variáveis,
ajuda a manter esse diretório limpo.

#+begin_src emacs-lisp
(setq user-emacs-directory (expand-file-name ed/cache-dir))
(use-package no-littering) ;; move muita coisa para o diretório acima

;; Alguns arquivos específicos usados pelo emacs
(setq url-history-file (no-littering-expand-var-file-name "url-history")
      custom-file (no-littering-expand-etc-file-name "custom.el"))

;; Diretórios próprios para backups e salvamentos automáticos
(setq backup-directory-alist
      `(("." . ,(no-littering-expand-var-file-name "backups/")))
      auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

* Atalhos de teclado

Basicamente toda a minha experiência no emacs foi utilizando o pacote =evil= para emular os atalhos de teclado do vim.
Agora, porém, estou dando uma chance aos atalhos padrões do emacs. Configuro o meu /layout/ para que as teclas
modificadoras sejam mais fáceis de pressionar, o que torna os padrões bem mais palatáveis.

#+begin_src emacs-lisp
(defvar-keymap ed/personal-map
  :doc "Prefixo para atalhos personalisados"
  "p" #'previous-buffer
  "=" #'indent-region)
(keymap-set global-map "C-z" ed/personal-map)

;; Alterações em atalhos nativos
(keymap-set global-map "M-z" #'zap-up-to-char)
(setq kill-whole-line t) ;; C-k mata a linha inteira
#+end_src

** Pacote =which-key=

Pacote bastante prestativo que mostra possíveis continuações para quaisquer atalhos incompletos.

#+begin_src emacs-lisp
(use-package which-key
  :defer 0
  :config (which-key-mode 1)
  (setq which-key-idle-delay 0.3))
#+end_src

* Visual

** Cores

Para programação e uso geral, uso os temas do pacote =doom-themes=, principalmente o =doom-one=. Eles são bastante coloridos e
agradáveis. Ocasionalmente, porém, uso também os temas =modus-operandi= e =modus-vivendi=, nativos do emacs 29, pois eles são
excelentes para tomar notas no org.

#+begin_src emacs-lisp
(setq modus-themes-org-blocks 'gray-background ;; fundo cinza em blocos de código
      modus-themes-italic-constructs t         ;; uso generoso do itálico
      modus-themes-mixed-fonts t)              ;; fontes monoespaçadas e variáveis

(use-package doom-themes
  :config
  (setq doom-themes-enable-italic t  ;; permite itálico
        doom-themes-enable-bold nil) ;; não curto muito negrito
  (load-theme 'doom-one t)
  ;; Comentários em itálico (o `doom-one' não tem isso)
  (set-face-attribute 'font-lock-comment-face nil :slant 'italic)
  (doom-themes-org-config)) ;; configurações extras para org
  #+end_src

** Interface

Não faço muitas alterações à interface padrão do emacs. Uso a /modeline/ com exibição do número da coluna do cursor e do horário (ambos
recursos nativos) e uso o pacote =minions= para resumir os modos menores em um único menu de contexto, o que dá um visual mais limpo à
/modeline/. Também uso linhas numeradas e faço outros toques cosméticos que deixam o emacs mais agradável.

#+begin_src emacs-lisp
(setq display-time-format "%H:%M"
      display-time-default-load-average nil)

(blink-cursor-mode -1) ;; não gosto de cursor piscando
(set-fringe-mode    0) ;; sem margens desnecessárias
(column-number-mode 1) ;; número da coluna na modeline
(display-time-mode  1) ;; horário na modeline

(setq display-line-numbers-type 'relative)
(defun ed/text-visual-setup ()
  "Configurações visuais em buffers de texto"
  (hl-line-mode 1)               ;; destaque para a linha atual
  (display-line-numbers-mode 1)) ;; linhas numeradas

;; Executa as configurações visuais acima
(dolist (mode '(text-mode-hook
                prog-mode-hook
                conf-mode-hook))
  (add-hook mode #'ed/text-visual-setup))

;; O `minions' resume bem os modos menores na modeline
(use-package minions
  :custom (minions-prominent-modes '(flymake-mode))
  :config (minions-mode 1))
#+end_src

** Fontes

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font ed/fixed-font)
(set-face-attribute 'fixed-pitch nil :font ed/fixed-font)
(set-face-attribute 'fixed-pitch-serif nil :font ed/fixed-serif)
(set-face-attribute 'variable-pitch nil :font ed/variable-font)
#+end_src

* Preenchimento automático

Única tradução razoável que eu encontrei para o termo /autocomplete/.

** Palavras fora de ordem

Os estilos de preenchimento são um dos aspectos de mais baixo nível do sistema de preenchimento automático do emacs. São eles
os responsáveis por mapear termos de pesquisa em possibilidades de continuação. O pacote =orderless= oferece um estilo que, em contraste
aos nativos do emacs, não exige que os termos de pesquisa estejam na mesma ordem em que aparecem nas possibilidades, o que o torna
muito útil e flexível.

#+begin_src emacs-lisp
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))
#+end_src

** /Minibuffer/

O /minibuffer/ é frequentemente utilizado para selecionar uma dentre muitas possibilidades, mas, como interface de seleção, é bastante
seco. O pacote =vertico= o incrementa com um menu de seleção vertical. Já o pacote =marginalia= melhora esse menu com anotações úteis
acerca de cada item.

#+begin_src emacs-lisp
(defun ed/minibuffer-del (arg)
  "Se o conteúdo do minibuffer for um caminho, apaga até a pasta pai do arquivo,
do contrário, apaga normalmente (i.e. um caractere só)"
  ;; Peguei isso emprestado da configuração de um amigo
  (interactive "p")
  (if minibuffer-completing-file-name
      (if (string-match-p "/." (minibuffer-contents))
          (zap-up-to-char (- arg) ?/)
        (delete-minibuffer-contents))
    (backward-delete-char arg)))

(use-package vertico
  :bind (:map minibuffer-local-map
              ("M-h" . backward-kill-word)
              ("<backspace>" . ed/minibuffer-del))
  :init
  (setq vertico-cycle t)
  (vertico-mode))

(use-package marginalia :init (marginalia-mode)) ;; minibuffer mais informativo
#+end_src

*** Comandos extras

O pacote =consult= oferece um conjunto de comandos extras bacanas que fazem muito uso do /minibuffer/.

#+begin_src emacs-lisp
(use-package consult
  :config
  (setq consult-preview-key "M-.") ;; previews automáticas me deixam desorientado
  (keymap-set ed/personal-map "b" #'consult-buffer)
  (keymap-set ed/personal-map "s" #'consult-line)
  (keymap-set ed/personal-map "r" #'consult-ripgrep)
  (keymap-set ed/personal-map "d" #'consult-flymake))
#+end_src

** Outros /Buffers/

O =company= é um pacote que oferece uma funcionalidade similar à do =vertico=, mas em /buffers/ comuns do editor. Os candidatos de
preenchimento aparecem um uma janela de /popup/ sobre a janela principal, o que é bem prático.

#+begin_src emacs-lisp
(use-package company
  :config
  (setq-default company-format-margin-function nil)
  (add-hook 'prog-mode-hook #'company-mode))
#+end_src

* Aplicações e ferramentas

** Org

O org é um formato de texto plano nativamente suportado pelo emacs. Ele é ótimo para preparar documentos e fazer anotações, e vem com
um conjunto bastante extenso de atalhos de teclado e comandos auxiliares que o tornam muito útil para diversos propósitos.

*** Configurações gerais

#+begin_src emacs-lisp
(defun ed/org-visual-setup ()
  "Configurações visuais do modo org"
  (org-indent-mode)
  (visual-line-mode)
  ;; Símbolos bonitinhos para certos elementos do org
  (setq prettify-symbols-alist
        '(("#+begin_src" . ?λ)
          ("#+end_src"   . ?λ)))
  (prettify-symbols-mode))

(add-hook 'org-mode-hook #'ed/org-visual-setup)

(setq org-startup-folded 'content ;; corpo dos documentos vem escondido ("folded")
      org-hide-emphasis-markers t ;; delimitadores de formatação ficam ocultos
      org-ellipsis "_")
#+end_src

*** Programação literária

Blocos de código são permitidos dentro de documentos org, o que permite a chamada programação literária: código e documentação
entrelaçados no mesmo arquivo. Algumas configurações tornam essa experiência com o org melhor.

#+begin_src emacs-lisp
;; Essas configurações de indentação garantem que código fique livremente
;; indentado, sem a constante interferência do org
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)

;; A biblioteca nativa `org-tempo' fornece atalhos para a inserção rápida
;; dos delimitadores de blocos, o que é bastante prático
(with-eval-after-load 'org
  (require 'org-tempo)
  (add-to-list 'org-modules 'org-tempo)
  ;; Atalhos para emacs-lisp e python
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))

;; O modo `electric-pair' é muito útil, mas acaba interferindo na inserção
;; de delimitadores configurada acima ao tentar completar parênteses angulares.
;; As linha abaixo resolvem essa questão
(defun ed/electric-no-angle-brackets ()
  "Desativa o balanceamento de <> pelo eletric-pair-mode"
  (setq-local electric-pair-inhibit-predicate
              `(lambda (ch)
                 (if (char-equal ch ?<) t (,electric-pair-inhibit-predicate ch)))))
(add-hook 'org-mode-hook #'ed/electric-no-angle-brackets)
#+end_src

*** Configuração literária

Esse próprio arquivo é um programa literário. Os arquivos de configuração que são realmente executados pelo emacs,
escritos em emacs-lisp, são gerados a partir desse documento com o comando =org-babel-tangle=. Acontece que eu muitas
vezes esqueço de executar esse comando eu mesmo, então faço com que o emacs ofereça-se para executá-lo após salvar
esse arquivo.

#+begin_src emacs-lisp
(defun ed/ask-tangle-config ()
  "Pergunta se os arquivos de emacs-lisp (init.el e early-init.el)
devem ser gerados ao salvar config.org"
  (when (string-equal (buffer-file-name)
                      (expand-file-name "config.org" ed/config-dir))
    (if (y-or-n-p "Gerar arquivos de emacs-lisp? ")(org-babel-tangle))))

(add-hook 'org-mode-hook
          ;; Função é executada sempre que arquivos org são salvos
          (lambda () (add-hook 'after-save-hook #'ed/ask-tangle-config)))
#+end_src

** Dired

O =dired= (/DIRectory EDitor/, editor de diretórios) é o gerenciador de arquivos nativo do emacs.

#+begin_src emacs-lisp
(setq dired-listing-switches "-lAh --group-directories-first"
      delete-by-moving-to-trash t)
#+end_src

** Terminal (=vterm=)

O pacote =vterm= traz um emulador de terminal completo para dentro do emacs.

#+begin_src emacs-lisp
(use-package vterm
  :config
  (keymap-set ed/personal-map "T" #'vterm)
  (keymap-set ed/personal-map "t" #'vterm-other-window))
#+end_src

** Magit

O pacote =magit= oferece simplesmente a melhor interface com o git já criada.

#+begin_src emacs-lisp
(use-package magit
  :config
  (keymap-set ed/personal-map "g" #'magit-status)
  (keymap-set project-prefix-map "g" #'magit-project-status))
#+end_src

* Programação

Para programar no emacs, eu normalmente uso o pacote =eglot= (nativo após a versão 29), que implementa um cliente de LSP.

** Configurações gerais

#+begin_src emacs-lisp
(push "~/.local/bin" exec-path) ;; alguns servidores LSP estão aqui
(use-package highlight-indent-guides ;; guias de indentação
  :hook (prog-mode . highlight-indent-guides-mode))

;; Colorização sintática melhor com o `tree-sitter.el'
(use-package tree-sitter
  :init (global-tree-sitter-mode)
  :hook (tree-sitter-after-on . tree-sitter-hl-mode))
(use-package tree-sitter-langs
  :after tree-sitter)

(setq compilation-scroll-output t)
#+end_src

** Linguagem C/C++

O estilo de indentação GNU não é muito a minha praia.

#+begin_src emacs-lisp
(defun ed/clang-setup ()
  "Configurações para C e C++"
  (c-set-style "user"))

(add-hook 'c-mode-hook #'ed/clang-setup)
(add-hook 'c++-mode-hook #'ed/clang-setup)
#+end_src

* Pré-inicialização

O arquivo =early-init.el=, gerado a partir do bloco de código abaixo, executa antes que as demais configurações no arquivo padrão de
configuração, bem como antes de certos eventos chave da inicialização do emacs. Isso o torna adequado para fazer ajustes relacionados
ao desempenho do editor. O meu =early-init.el= é fortemente baseado no de um amigo, que por sua vez é baseado no do DOOM emacs.

#+begin_src emacs-lisp :tangle ./early-init.el
;; -*- lexical-binding: t; -*-

(defun ed/enable-redisplays ()
  "Reativa redesenhos da janela após o seu desligamento"
  (setq-default inhibit-redisplay nil
                inhibit-message nil)
  (redisplay))

(setq gc-cons-threshold most-positive-fixnum) ;; previne coletas de lixo na inicialização
(setq-default inhibit-redisplay t ;; desativa redesenhos na janela
              inhibit-message t)
;; Após a janela ter sido aberta, é necessário permitir redesenhos novamente
(add-hook 'window-setup-hook #'ed/enable-redisplays)

;; A função `load-file' pode causar redesenhos indesejados. Por isso, desativo-a
;; aqui para religá-la após a abertura da janela
(define-advice load-file (:override (file) silence)
  (load-file nil 'nomessage))
(define-advice startup--load-user-init-file
    (:before (&rest _) remove-load-file-silence)
  (advice-remove #'load-file #'load-file@silence))

;; Remove elementos indesejados da interface. É bom removê-los aqui, antes que a
;; janela seja aberta, pois assim eles não são sequer desenhados
(setq inhibit-startup-message t
      ring-bell-function 'ignore)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(tooltip-mode -1)
;; Desnecessário, mas gosto de também definir o título da janela aqui
(setq frame-title-format "%b - GNU emacs")

;; Previne o carregamento do modo Lisp Interaction ao abrir o emacs
(setq initial-major-mode 'fundamental-mode
      initial-scratch-message "Bem-vindo ao GNU emacs!") ;; :)

;; Suprime erros/avisos da compilação nativa e redireciona o seu cache para
;; um diretório melhor (`~/.cache/emacs/var')
(setq native-comp-async-report-warnings-errors nil)
(when (fboundp 'startup-redirect-eln-cache)
  (startup-redirect-eln-cache
   (convert-standard-filename
    (expand-file-name "var/eln-cache/" "~/.cache/emacs/"))))
#+end_src

Importante reativar a coleta de lixo depois da inicialização.

#+begin_src emacs-lisp
 (setq gc-cons-threshold (* 20 1000 1000))
#+end_src
